{"/home/travis/build/npmtest/node-npmtest-babel-plugin-react-transform/test.js":"/* istanbul instrument in package npmtest_babel_plugin_react_transform */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-plugin-react-transform/lib.npmtest_babel_plugin_react_transform.js":"/* istanbul instrument in package npmtest_babel_plugin_react_transform */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_babel_plugin_react_transform = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_babel_plugin_react_transform = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-plugin-react-transform/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-babel-plugin-react-transform && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_babel_plugin_react_transform */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_babel_plugin_react_transform\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_babel_plugin_react_transform.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_babel_plugin_react_transform.rollup.js'] =\n            local.assetsDict['/assets.npmtest_babel_plugin_react_transform.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_babel_plugin_react_transform.__dirname + '/lib.npmtest_babel_plugin_react_transform.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-babel-plugin-react-transform/node_modules/babel-plugin-react-transform/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = function (_ref) {\n  var t = _ref.types;\n  var template = _ref.template;\n\n  function matchesPatterns(path, patterns) {\n    return !!(0, _find2.default)(patterns, function (pattern) {\n      return t.isIdentifier(path.node, { name: pattern }) || path.matchesPattern(pattern);\n    });\n  }\n\n  function isReactLikeClass(node) {\n    return !!(0, _find2.default)(node.body.body, function (classMember) {\n      return t.isClassMethod(classMember) && t.isIdentifier(classMember.key, { name: 'render' });\n    });\n  }\n\n  function isReactLikeComponentObject(node) {\n    return t.isObjectExpression(node) && !!(0, _find2.default)(node.properties, function (objectMember) {\n      return (t.isObjectProperty(objectMember) || t.isObjectMethod(objectMember)) && (t.isIdentifier(objectMember.key, { name: 'render' }) || t.isStringLiteral(objectMember.key, { value: 'render' }));\n    });\n  }\n\n  // `foo({ displayName: 'NAME' });` => 'NAME'\n  function getDisplayName(node) {\n    var property = (0, _find2.default)(node.arguments[0].properties, function (node) {\n      return node.key.name === 'displayName';\n    });\n    return property && property.value.value;\n  }\n\n  function hasParentFunction(path) {\n    return !!path.findParent(function (parentPath) {\n      return parentPath.isFunction();\n    });\n  }\n\n  // wrapperFunction(\"componentId\")(node)\n  function wrapComponent(node, componentId, wrapperFunctionId) {\n    return t.callExpression(t.callExpression(wrapperFunctionId, [t.stringLiteral(componentId)]), [node]);\n  }\n\n  // `{ name: foo }` => Node { type: \"ObjectExpression\", properties: [...] }\n  function toObjectExpression(object) {\n    var properties = Object.keys(object).map(function (key) {\n      return t.objectProperty(t.identifier(key), object[key]);\n    });\n\n    return t.objectExpression(properties);\n  }\n\n  var wrapperFunctionTemplate = template('\\n    function WRAPPER_FUNCTION_ID(ID_PARAM) {\\n      return function(COMPONENT_PARAM) {\\n        return EXPRESSION;\\n      };\\n    }\\n  ');\n\n  var VISITED_KEY = 'react-transform-' + Date.now();\n\n  var componentVisitor = {\n    Class: function Class(path) {\n      if (path.node[VISITED_KEY] || !matchesPatterns(path.get('superClass'), this.superClasses) || !isReactLikeClass(path.node)) {\n        return;\n      }\n\n      path.node[VISITED_KEY] = true;\n\n      var componentName = path.node.id && path.node.id.name || null;\n      var componentId = componentName || path.scope.generateUid('component');\n      var isInFunction = hasParentFunction(path);\n\n      this.components.push({\n        id: componentId,\n        name: componentName,\n        isInFunction: isInFunction\n      });\n\n      // Can't wrap ClassDeclarations\n      var isStatement = t.isStatement(path.node);\n      var expression = t.toExpression(path.node);\n\n      // wrapperFunction(\"componentId\")(node)\n      var wrapped = wrapComponent(expression, componentId, this.wrapperFunctionId);\n      var constId = void 0;\n\n      if (isStatement) {\n        // wrapperFunction(\"componentId\")(class Foo ...) => const Foo = wrapperFunction(\"componentId\")(class Foo ...)\n        constId = t.identifier(componentName || componentId);\n        wrapped = t.variableDeclaration('const', [t.variableDeclarator(constId, wrapped)]);\n      }\n\n      if (t.isExportDefaultDeclaration(path.parent)) {\n        path.parentPath.insertBefore(wrapped);\n        path.parent.declaration = constId;\n      } else {\n        path.replaceWith(wrapped);\n      }\n    },\n    CallExpression: function CallExpression(path) {\n      if (path.node[VISITED_KEY] || !matchesPatterns(path.get('callee'), this.factoryMethods) || !isReactLikeComponentObject(path.node.arguments[0])) {\n        return;\n      }\n\n      path.node[VISITED_KEY] = true;\n\n      // `foo({ displayName: 'NAME' });` => 'NAME'\n      var componentName = getDisplayName(path.node);\n      var componentId = componentName || path.scope.generateUid('component');\n      var isInFunction = hasParentFunction(path);\n\n      this.components.push({\n        id: componentId,\n        name: componentName,\n        isInFunction: isInFunction\n      });\n\n      path.replaceWith(wrapComponent(path.node, componentId, this.wrapperFunctionId));\n    }\n  };\n\n  var ReactTransformBuilder = function () {\n    function ReactTransformBuilder(file, options) {\n      _classCallCheck(this, ReactTransformBuilder);\n\n      this.file = file;\n      this.program = file.path;\n      this.options = this.normalizeOptions(options);\n\n      // @todo: clean this shit up\n      this.configuredTransformsIds = [];\n    }\n\n    _createClass(ReactTransformBuilder, [{\n      key: 'normalizeOptions',\n      value: function normalizeOptions(options) {\n        return {\n          factoryMethods: options.factoryMethods || ['React.createClass'],\n          superClasses: options.superClasses || ['React.Component', 'Component'],\n          transforms: options.transforms.map(function (opts) {\n            return {\n              transform: opts.transform,\n              locals: opts.locals || [],\n              imports: opts.imports || []\n            };\n          })\n        };\n      }\n    }, {\n      key: 'build',\n      value: function build() {\n        var componentsDeclarationId = this.file.scope.generateUidIdentifier('components');\n        var wrapperFunctionId = this.file.scope.generateUidIdentifier('wrapComponent');\n\n        var components = this.collectAndWrapComponents(wrapperFunctionId);\n\n        if (!components.length) {\n          return;\n        }\n\n        var componentsDeclaration = this.initComponentsDeclaration(componentsDeclarationId, components);\n        var configuredTransforms = this.initTransformers(componentsDeclarationId);\n        var wrapperFunction = this.initWrapperFunction(wrapperFunctionId);\n\n        var body = this.program.node.body;\n\n        body.unshift(wrapperFunction);\n        configuredTransforms.reverse().forEach(function (node) {\n          return body.unshift(node);\n        });\n        body.unshift(componentsDeclaration);\n      }\n\n      /**\n       * const Foo = _wrapComponent('Foo')(class Foo extends React.Component {});\n       * ...\n       * const Bar = _wrapComponent('Bar')(React.createClass({\n       *   displayName: 'Bar'\n       * }));\n       */\n\n    }, {\n      key: 'collectAndWrapComponents',\n      value: function collectAndWrapComponents(wrapperFunctionId) {\n        var components = [];\n\n        this.file.path.traverse(componentVisitor, {\n          wrapperFunctionId: wrapperFunctionId,\n          components: components,\n          factoryMethods: this.options.factoryMethods,\n          superClasses: this.options.superClasses,\n          currentlyInFunction: false\n        });\n\n        return components;\n      }\n\n      /**\n       * const _components = {\n       *   Foo: {\n       *     displayName: \"Foo\"\n       *   }\n       * };\n       */\n\n    }, {\n      key: 'initComponentsDeclaration',\n      value: function initComponentsDeclaration(componentsDeclarationId, components) {\n        var uniqueId = 0;\n\n        var props = components.map(function (component) {\n          var componentId = component.id;\n          var componentProps = [];\n\n          if (component.name) {\n            componentProps.push(t.objectProperty(t.identifier('displayName'), t.stringLiteral(component.name)));\n          }\n\n          if (component.isInFunction) {\n            componentProps.push(t.objectProperty(t.identifier('isInFunction'), t.booleanLiteral(true)));\n          }\n\n          var objectKey = void 0;\n\n          if (t.isValidIdentifier(componentId)) {\n            objectKey = t.identifier(componentId);\n          } else {\n            objectKey = t.stringLiteral(componentId);\n          }\n\n          return t.objectProperty(objectKey, t.objectExpression(componentProps));\n        });\n\n        return t.variableDeclaration('const', [t.variableDeclarator(componentsDeclarationId, t.objectExpression(props))]);\n      }\n\n      /**\n       * import _transformLib from \"transform-lib\";\n       * ...\n       * const _transformLib2 = _transformLib({\n       *   filename: \"filename\",\n       *   components: _components,\n       *   locals: [],\n       *   imports: []\n       * });\n       */\n\n    }, {\n      key: 'initTransformers',\n      value: function initTransformers(componentsDeclarationId) {\n        var _this = this;\n\n        return this.options.transforms.map(function (transform) {\n          var transformName = transform.transform;\n          var transformImportId = _this.file.addImport(transformName, 'default', transformName);\n\n          var transformLocals = transform.locals.map(function (local) {\n            return t.identifier(local);\n          });\n\n          var transformImports = transform.imports.map(function (importName) {\n            return _this.file.addImport(importName, 'default', importName);\n          });\n\n          var configuredTransformId = _this.file.scope.generateUidIdentifier(transformName);\n          var configuredTransform = t.variableDeclaration('const', [t.variableDeclarator(configuredTransformId, t.callExpression(transformImportId, [toObjectExpression({\n            filename: t.stringLiteral(_this.file.opts.filename),\n            components: componentsDeclarationId,\n            locals: t.arrayExpression(transformLocals),\n            imports: t.arrayExpression(transformImports)\n          })]))]);\n\n          _this.configuredTransformsIds.push(configuredTransformId);\n\n          return configuredTransform;\n        });\n      }\n\n      /**\n       * function _wrapComponent(id) {\n       *   return function (Component) {\n       *     return _transformLib2(Component, id);\n       *   };\n       * }\n       */\n\n    }, {\n      key: 'initWrapperFunction',\n      value: function initWrapperFunction(wrapperFunctionId) {\n        var idParam = t.identifier('id');\n        var componentParam = t.identifier('Component');\n\n        var expression = this.configuredTransformsIds.reverse().reduce(function (memo, transformId) {\n          return t.callExpression(transformId, [memo, idParam]);\n        }, componentParam);\n\n        return wrapperFunctionTemplate({\n          WRAPPER_FUNCTION_ID: wrapperFunctionId,\n          ID_PARAM: idParam,\n          COMPONENT_PARAM: componentParam,\n          EXPRESSION: expression\n        });\n      }\n    }], [{\n      key: 'validateOptions',\n      value: function validateOptions(options) {\n        return (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && Array.isArray(options.transforms);\n      }\n    }, {\n      key: 'assertValidOptions',\n      value: function assertValidOptions(options) {\n        if (!ReactTransformBuilder.validateOptions(options)) {\n          throw new Error('babel-plugin-react-transform requires that you specify options ' + 'in .babelrc or from the Babel Node API, and that it is an object ' + 'with a transforms property which is an array.');\n        }\n      }\n    }]);\n\n    return ReactTransformBuilder;\n  }();\n\n  return {\n    visitor: {\n      Program: function Program(path, _ref2) {\n        var file = _ref2.file;\n        var opts = _ref2.opts;\n\n        ReactTransformBuilder.assertValidOptions(opts);\n        var builder = new ReactTransformBuilder(file, opts);\n        builder.build();\n      }\n    }\n  };\n};\n\nvar _find = require('lodash/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }"}